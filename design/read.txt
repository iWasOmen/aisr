
1. research workflow中，当前task planning workflow实际上是自己在循环，但是设计方案应该是经过search plan workflow循环之后，即第一次任务规划的结果都有了以后，进行第二次task planning，再看看有没有什么insight（来自agent或者人类），然后再进行一次task planning，然后在进入第二次大的task循环的search planning部分，而不是说task plan只在最开始自己迭代几次，之后就不随研究结果迭代了
2. search planning workflow的部分同理，你当前直接针对不同的sub_tasks一次性生成了搜索策略，但实际上应该是执行完第一个sub_task以后，才去分析下一个sub_task，这个时候才会选择搜具体的搜索策略
3. sub_answer workflow同理，他也应该是根据当前sub_task来进行子回答的，而不是在一个循环中，把每一个sub_task都回答一遍
4. 关于上述设计，我可以再给你生动说明一下，即：
-task planning workflow应该不感知具体的搜索query、搜索到的doc，而只感知上一次大的任务规划是什么、上一次任务规划的结果是什么（即对于每个sub_task的子回答）、当前对此次任务规划的insight是什么（多轮形式）
-search planning workflow应该不感知具体的搜索doc是什么，也不感知之前的任务规划是什么，它只感知当前任务规划都有哪些sub_tasks，然后当前进展到哪一个sub_task了和上一个sub_task的执行过程是怎样的以及对应的子回答是什么（多轮形式）
-sub_answer workflow应该不感知除了当前sub_task以外的之前的或者将来的sub_task，它只需要感知当前sub_task是啥，搜索方式有哪些，需要爬虫深入还是直接子回答（多轮形式）

你认为这样的解释以后，我的方案是否合理？请一步步思考，如果合理，请修改对应的实现，如果不合理，请与我讨论。请注意，我注意到当前LLMProvider为单轮输入，如果你认为需要改为多轮输入，也请进行相应的修改

分析一下第一个sub_task有没有执行完，没执行完的话就继续搜索规划-搜索-子回答的循环，执行完的话才是


            "complexity": complexity,
            "sub_tasks": sub_tasks,
            "research_plan": research_plan
            在一起

complexity、sub_tasks、research_plan
_analyze_plan、_generate_research_insights、_refine_plan、_refine_based_on_results


设计上还有一些问题，就是一共应该由三个循环：
task planning循环：query->task planning->agent or human insight->task executing 循环->task planning->agent or human insight->task executing 循环->...->answer plan->answer executing
task executing 循环：sub_tasks->search planning for task1->search executing循环->循环直到task1解决->search planning for task2->search->search executing循环->..
search executing循环：sub_task+search planning->search->子回答 或者 sub_task+search planning->search->爬虫深入->...->子回答

即分为planning部分和executing 部分，你觉得这样子是不是更加清晰些？清晰的话就再继续优化下

认同，然后TaskExecutingWorkflow可以重命名为TaskExecutingSearchPlanningWorkflow，即搜索规划是在这一步完成的

TaskExecutingSearchPlanningWorkflow

好的，现在我们该优化TaskExecutingSearchPlanningWorkflow了，
prioritized_tasks = self._prioritize_tasks(sub_tasks)这种调整优先级的不要，因为默认任务规划传过来的sub_tasks是有优先级的
然后就是task executingSearchPlanning 循环：sub_tasks->search planning for task1->search executing循环->循环直到task1解决->search planning for task2->search->search executing循环->..
现在应该没有“循环直到task1解决”这个循环，现在只是对每一个sub_task循环
请你与我讨论，我的设计是否更优？如果你认可，你可以直接优化TaskExecutingSearchPlanningWorkflow


我认为我们一上来做的太复杂了，做这样一个系统应该从简单的做起，然后逐渐添加功能，我的最简设计如下：
Task Plan Agent：
-输入：用户query+可选的Task Plan历史（包括历史task plan以及之前的每个task plan的所有sub answer+上一次未执行的plan+对该plan的insight）
-输出：一个list形式的sub_tasks+跳出
Search Plan Agent：
-输入：当前task+可选的Search Plan历史（包括历史的search plan以及之前的每个plan的sub answer+对本次plan的sub_answer）
-输出：对于当前sub_task的搜索query列表+当前sub_task是否已经完成
Sub Answer Agent：
-输入：当前的sub_task+doc（先调用api然后爬去网页，强制使用top5）
-输出：对于当前sub_task的的sub_answer
Insight Agent
-输入：用户query+当前未执行的task plan+可选的Task Plan历史（包括历史task plan以及之前的每个task plan的所有sub answer）
-输出：对于当前task plan的的insight
AnswerPlan Agent
-输入：用户query+所有task以及其对应的sub_answers
-输出：对于当前用户query，回答的大纲
Answer Agent
-输入：用户query+所有task以及其对应的sub_answers+回答的大纲
-输出：回答

LLM provider：
输入message，直接输出结果或者输出工具调用，对于json输出的agent，均使用工具调用的形式

Tools:
包含web_api和web_crawler两个原子功能以及一个web_search复合功能：
def web_crawler(raw_url):
    """输入query，返回网页爬去后的str结果:"""
    url = f"https://r.jina.ai/{raw_url}"
    headers = {
        "Authorization": "Bearer jina_aa5310a5f80f4e30b47623fd842310d8464pWJRxSDMi6gBcwvviHpMnfwc9"
    }

    response = requests.get(url, headers=headers)

    #返回网页内容
    print(response.text)
def web_api(query):
    """返回一个列表，形如如下：
    [{'snippet': 'Learn about the nutrients, antioxidants, and potential health effects of<b> apples.</b> Find out how<b> apples</b> may help with weight loss, diabetes, heart disease, and cancer.',
  'title': 'Apples 101: Nutrition Facts and Health Benefits',
  'link': 'https://www.healthline.com/nutrition/foods/apples'},
 {'snippet': 'Learn how<b> apples</b> can improve your health with their fiber, antioxidants, and phytochemicals. Find out the best types of<b> apples</b> for different purposes, how to buy and store them, and what side effects to watch out for.',
  'title': 'Apples: Nutrition and Health Benefits - WebMD',
  'link': 'https://www.webmd.com/food-recipes/benefits-apples'},
 {'snippet': '<b>Apples</b> are nutritious, filling, and versatile fruits that may lower your risk of various diseases. Learn how<b> apples</b> can support your weight loss, heart health, gut health, and brain health with scientific evidence.',
  'title': '10 Impressive Health Benefits of Apples',"""
    import os

    os.environ["BING_SUBSCRIPTION_KEY"] = ""
    os.environ["BING_SEARCH_URL"] = "https://api.bing.microsoft.com/v7.0/search"

    from langchain_community.utilities import BingSearchAPIWrapper
    search = BingSearchAPIWrapper()
    res = search.results(query, 5)
    print(type(res))
    print(res)
还有一个串起来web_api和web_crawler的web_search函数，达到输入一个query，返回top5网页的精读结果

main_workflow函数：
没有记忆设计，没有router设计，所有能简化的都简化掉，一切都在main的两个循环里：
外层循环：query->Task Plan Agent->sub_tasks->Search Plan Agent->Sub Answer Agent->sub_answers->Task Plan Agent->Insight Agent->Task Plan Agent->循环直到最大次数或者任务已解决->AnswerPlan Agent->Answer Agent
内存循环：sub_tasks->each sub_task->Search Plan Agent->Sub Answer Agent->sub answer for this task->循环直到该task解决，然后进入到下一个task->直到所有task解决->sub_answers
整个main接受一个query，最终输出回答结果

你认为这个设计怎么样？请你先不要实现，先讲讲你的理解

